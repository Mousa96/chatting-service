---
description: this is the chatting app requirements
globs: 
---

# Your rule content
Build a chatting service in Go that allows users to:
1. Send messages to one another.
2. Broadcast messages to multiple users.
3. Upload media (e.g., images, videos, files).
4. Use a basic web interface to interact with the app.
This project assesses your ability to build a backend-heavy application using Go, define
clean APIs, structure your codebase, ensure scalability, and think through both developer
and user experiences.
🧠 Functional Requirements:
1. Messaging Features:
● Users can create accounts (simple auth, JWT or session-based).
● A user can send a message to another user.
● A user can broadcast a message to multiple users.
● Users can retrieve their message history (chat history per user).
● Support timestamps for messages.
2. Media Upload:
● An API to upload and attach media to a message.
● Store files locally or use cloud storage (e.g., AWS S3).
3. User Interface:
A very simple web interface to:
● Log in or sign up.
● View chat messages.
● Send messages to users including media.
● Broadcast messages.

⚙️ Technical Requirements:
● Implement the app in Go (Golang).
● Use a database (PostgreSQL or your preferred DB) to persist users, messages, and
media.
● Write a Dockerfile for the backend.
● Add a basic docker-compose.yml for local development (app + DB).
● Structure the code in a modular, maintainable way.
● Provide clear and complete API documentation (Swagger, Postman, or Markdown).
🧪 Bonus (Optional):
● Using the benefit of Go concurrency (e.g., handling multiple message broadcasts
● Design your message storage schema to handle large volumes
● Reducing DB load on heavy endpoints
● Implement pagination wherever needed
● Implement WebSocket support for real-time messaging.
● Add rate limiting or message throttling.
● Include unit and integration tests.
● Support user online/offline status.
● Message delivery status (sent/received/read).
📦 Deliverables:
1. GitHub Repository:
● Push your full code to a public/private GitHub repo.
● Include a README with:
○ Architecture overview
○ Setup instructions
○ Tech stack used
○ API usage or Postman collection
○ Any known limitations
2. Presentation:
● Prepare a short 5–10 minute presentation to walk through:
● System architecture
● Key decisions & trade-offs
● What would you do differently with more time
● Demo of the app
- You can @ files here
- You can use markdown but dont have to
