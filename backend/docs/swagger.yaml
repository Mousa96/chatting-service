definitions:
  internal_auth_models.User:
    properties:
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.AuthResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/internal_auth_models.User'
    type: object
  models.BroadcastMessageRequest:
    properties:
      content:
        type: string
      media_url:
        type: string
      receiver_ids:
        items:
          type: integer
        type: array
    type: object
  models.CreateMessageRequest:
    properties:
      content:
        type: string
      media_url:
        type: string
      receiver_id:
        type: integer
    required:
    - content
    - receiver_id
    type: object
  models.CreateUserRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.Message:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      media_url:
        type: string
      receiver_id:
        type: integer
      receiver_ids:
        items:
          type: integer
        type: array
      sender_id:
        type: integer
      status:
        $ref: '#/definitions/models.MessageStatus'
      updated_at:
        type: string
    type: object
  models.MessageStatus:
    enum:
    - sent
    - delivered
    - read
    type: string
    x-enum-varnames:
    - StatusSent
    - StatusDelivered
    - StatusRead
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: User login
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account and returns JWT token
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Registration successful
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Register a new user
      tags:
      - Auth
  /messages:
    post:
      consumes:
      - application/json
      description: Sends a message to another user
      parameters:
      - description: Message details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Message sent
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Send a message
      tags:
      - Messages
  /messages/broadcast:
    post:
      consumes:
      - application/json
      description: Sends a message to multiple users
      parameters:
      - description: Broadcast message details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.BroadcastMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Messages broadcasted
          schema:
            items:
              $ref: '#/definitions/models.Message'
            type: array
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "429":
          description: Rate limit exceeded
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Broadcast a message
      tags:
      - Messages
  /messages/conversation:
    get:
      consumes:
      - application/json
      description: Retrieves message history between two users with pagination
      parameters:
      - description: User ID to get conversation with
        in: query
        name: user_id
        required: true
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Conversation messages
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/models.Message'
              type: array
            type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get conversation
      tags:
      - Messages
  /messages/conversation/paginated:
    get:
      consumes:
      - application/json
      description: Retrieves message history between current user and another user
        with pagination
      parameters:
      - description: User ID to get conversation with
        in: query
        name: user_id
        required: true
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10, max: 100)'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Response with messages array and pagination object
          schema:
            type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get paginated conversation
      tags:
      - Messages
  /messages/history:
    get:
      consumes:
      - application/json
      description: Retrieves all messages for the current user with pagination
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10)'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Messages with pagination
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get user message history
      tags:
      - Messages
  /messages/status:
    put:
      consumes:
      - application/json
      description: Updates a message's status (read, delivered, etc.)
      parameters:
      - description: Status update request
        in: body
        name: request
        required: true
        schema:
          type: object
      - description: Message ID to update
        in: body
        name: request.message_id
        required: true
        schema:
          type: integer
      - description: New status (read, delivered, etc.)
        in: body
        name: request.status
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success response
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update message status
      tags:
      - Messages
  /messages/upload:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a media file
      parameters:
      - description: Media file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: File URL
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Upload media
      tags:
      - Messages
  /users:
    get:
      consumes:
      - application/json
      description: Retrieves all users except the current user
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items: {}
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get all users
      tags:
      - Users
  /users/id:
    get:
      consumes:
      - application/json
      description: Retrieves a specific user by their ID
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema: {}
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get user by ID
      tags:
      - Users
  /users/status:
    put:
      consumes:
      - application/json
      description: Updates the current user's online status
      parameters:
      - description: Status update request
        in: body
        name: request
        required: true
        schema:
          type: object
      - description: User status (online/offline/away)
        in: body
        name: request.status
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update user status
      tags:
      - Users
  /ws:
    get:
      consumes:
      - application/json
      description: Establishes a WebSocket connection for real-time messaging
      produces:
      - application/json
      responses:
        "101":
          description: Switching protocols
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: WebSocket connection
      tags:
      - WebSocket
  /ws/status:
    get:
      consumes:
      - application/json
      description: Retrieves the online status of a specific user
      parameters:
      - description: User ID to get status for
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User status response with status field
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get user status
      tags:
      - WebSocket
  /ws/users:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all currently connected user IDs
      produces:
      - application/json
      responses:
        "200":
          description: List of connected user IDs
          schema:
            items:
              type: integer
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get all connected users
      tags:
      - WebSocket
swagger: "2.0"
