definitions:
  internal_auth_models.User:
    properties:
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  internal_message_models.MessageStatus:
    enum:
    - sent
    - delivered
    - read
    type: string
    x-enum-varnames:
    - StatusSent
    - StatusDelivered
    - StatusRead
  models.AuthResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/internal_auth_models.User'
    type: object
  models.BroadcastMessageRequest:
    properties:
      content:
        type: string
      media_url:
        type: string
      receiver_ids:
        items:
          type: integer
        type: array
    type: object
  models.CreateMessageRequest:
    properties:
      content:
        type: string
      media_url:
        type: string
      receiver_id:
        type: integer
    required:
    - content
    - receiver_id
    type: object
  models.CreateUserRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.Message:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      media_url:
        type: string
      receiver_id:
        type: integer
      receiver_ids:
        items:
          type: integer
        type: array
      sender_id:
        type: integer
      status:
        $ref: '#/definitions/internal_message_models.MessageStatus'
      updated_at:
        type: string
    type: object
  models.Pagination:
    properties:
      current_page:
        type: integer
      has_next_page:
        type: boolean
      has_prev_page:
        type: boolean
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username and password
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Registration successful
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "409":
          description: Username already exists
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Register a new user
      tags:
      - auth
  /messages:
    post:
      consumes:
      - application/json
      description: Send a message to another user
      parameters:
      - description: Message details
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/models.CreateMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Message sent successfully
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Send a message
      tags:
      - messages
  /messages/broadcast:
    post:
      consumes:
      - application/json
      description: Send a message to multiple users
      parameters:
      - description: Broadcast message details
        in: body
        name: broadcast
        required: true
        schema:
          $ref: '#/definitions/models.BroadcastMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Broadcasted messages
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/models.Message'
              type: array
            type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "429":
          description: Rate limit exceeded
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Broadcast a message
      tags:
      - messages
  /messages/conversation:
    get:
      consumes:
      - application/json
      description: Retrieve message history between two users
      parameters:
      - description: User ID to get conversation with
        in: query
        name: user_id
        required: true
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Conversation messages
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/models.Message'
              type: array
            type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get conversation between users
      tags:
      - messages
  /messages/conversation/paginated:
    get:
      consumes:
      - application/json
      description: Retrieve message history between current user and another user
        with pagination
      parameters:
      - description: User ID to get conversation with
        in: query
        name: user_id
        required: true
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10, max: 100)'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Response with messages array and pagination object
          schema:
            properties:
              messages:
                items:
                  $ref: '#/definitions/models.Message'
                type: array
              pagination:
                $ref: '#/definitions/models.Pagination'
            type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get paginated conversation
      tags:
      - messages
  /messages/history:
    get:
      consumes:
      - application/json
      description: Retrieve all messages for the current user with pagination
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10)'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Messages with pagination
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get user message history
      tags:
      - messages
  /messages/status:
    put:
      consumes:
      - application/json
      description: Update a message's delivery status (read, delivered, etc.)
      parameters:
      - description: Status update request
        in: body
        name: status
        required: true
        schema:
          properties:
            message_id:
              type: integer
            status:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Success response
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update message status
      tags:
      - messages
  /messages/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a media file for messages
      parameters:
      - description: Media file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: File upload response with URL
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Upload media file
      tags:
      - messages
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve all users except the current user
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              type: object
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get all users
      tags:
      - users
  /users/id:
    get:
      consumes:
      - application/json
      description: Retrieve a specific user by their ID
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get user by ID
      tags:
      - users
  /users/status:
    put:
      consumes:
      - application/json
      description: Update the current user's online status
      parameters:
      - description: Status update request - status should be 'online', 'offline',
          or 'away'
        in: body
        name: status
        required: true
        schema:
          properties:
            status:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update user status
      tags:
      - users
  /ws:
    get:
      consumes:
      - application/json
      description: 'Upgrades HTTP connection to WebSocket for real-time messaging.
        Supports message types: chat, status, typing'
      produces:
      - application/json
      responses:
        "101":
          description: Switching Protocols - Connection established
          schema:
            type: string
        "200":
          description: Message received/sent successfully
          schema:
            type: string
        "400":
          description: Bad Request - Invalid message format
          schema:
            type: string
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            type: string
      security:
      - Bearer: []
      summary: Establish WebSocket connection
      tags:
      - websocket
swagger: "2.0"
